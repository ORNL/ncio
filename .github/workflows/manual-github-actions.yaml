
name: GitHub Actions manual CI

on:
  issue_comment:
    types: [created]
  
jobs:

  linux_pr_comment:
    if: |
        github.repository_owner == 'ORNL' &&
        github.event.issue.pull_request &&
        ( startsWith(github.event.comment.body, 'Test this please') || 
          startsWith(github.event.comment.body, 'Start testing in-house') )

    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    env:
      GH_JOBNAME: ${{ matrix.jobname }}
      GH_OS: Linux
    strategy:
      fail-fast: false
      matrix:
        jobname: [
          ubuntu18-gcc8-manual
        ]
        include:
        - jobname: ubuntu18-gcc8-manual
          container: 
            image: williamfgc/ncio-ci:ubuntu18-gcc8-clang6
            options: -u root
       
    steps:    
    - name: Verify actor
      id: check
      env:
        ALLOWED_ACTORS: ${{secrets.ACTORS}}
        CURRENT_ACTOR: ${{secrets.TOKENIZER}}${{github.actor}}${{secrets.TOKENIZER}}
      if: contains(${{env.ALLOWED_ACTORS}}, ${{env.CURRENT_ACTOR}})
      run: |
          echo "::set-output name=triggered::true" # set output in step1
    
    - name: Github API Request
      if: steps.check.outputs.triggered == 'true'
      id: request
      uses: octokit/request-action@v2.0.0
      with:
        route: ${{ github.event.issue.pull_request.url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Test Manual
      if: steps.check.outputs.triggered == 'true'
      uses: Sibz/github-status-action@v1
      with: 
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: 'Test Manual'
        state: 'pending'
        sha: ${{ fromJson(steps.request.outputs.data).head.sha }}
        target_url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
        
    - name: Get PR informations
      if: steps.check.outputs.triggered == 'true'
      id: pr_data
      run: |
          echo "::set-output name=branch::${{ fromJson(steps.request.outputs.data).head.ref }}"
          echo "::set-output name=repo_name::${{ fromJson(steps.request.outputs.data).head.repo.full_name }}"
          echo "::set-output name=repo_clone_url::${{ fromJson(steps.request.outputs.data).head.repo.clone_url }}"
          echo "::set-output name=repo_ssh_url::${{ fromJson(steps.request.outputs.data).head.repo.ssh_url }}"
          
    - name: Checkout PR Branch
      if: steps.check.outputs.triggered == 'true'
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ fromJson(steps.request.outputs.data).head.repo.full_name }}
        ref: ${{ steps.pr_data.outputs.branch }}
        
    - name: Configure
      if: steps.check.outputs.triggered == 'true'
      run: scripts/ci/github-actions/bash/run_step.sh configure

    - name: Build
      if: steps.check.outputs.triggered == 'true'
      run: scripts/ci/github-actions/bash/run_step.sh build

    - name: Test
      if: steps.check.outputs.triggered == 'true'
      run: scripts/ci/github-actions/bash/run_step.sh test

    - name: Install
      if: steps.check.outputs.triggered == 'true'
      run: scripts/ci/github-actions/bash/run_step.sh install
    
    - name: Test Manual
      if: always() && steps.check.outputs.triggered == 'true'
      uses: Sibz/github-status-action@v1
      with: 
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: 'Test Manual'
        state: ${{ job.status }} 
        sha: ${{ fromJson(steps.request.outputs.data).head.sha }}
        target_url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}

